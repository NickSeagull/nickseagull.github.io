<section id="About" class="container mx-auto mt-16 mb-28 p-6">
  <h2 class="heading text-5xl md:text-9xl uppercase mb-12">
    What's in for you
  </h2>
  <div class="grid grid-cols-1 md:grid-cols-1 items-center md:p-0 gap-8">
    <div>
      <div class="text-lg md:text-2xl text-secondary space-y-4">
        <p>
          <strong
            >It seems like your daily standups have become debugging sessions
            where half the team waits while someone traces through spaghetti
            code to figure out why production broke... again.</strong
          >
        </p>
        <p>
          Your frontend team thinks &quot;user&quot; means one thing and your
          backend team thinks another, you don&#39;t just get bugs - you get
          architectural drift. Each team builds their own workarounds, and every
          new feature makes the system harder to understand. Now someone
          suggests adding AI features, and suddenly you&#39;re dealing with
          embeddings, token limits, and vector databases on top of an already
          fragile foundation.
        </p>
        <p>
          <strong
            >Would it be a bad idea to work alongside someone who shows your
            team how to make these problems structurally impossible?</strong
          >
        </p>
        <p>
          Picture this: Instead of pair programming on adding more try-catch
          blocks, we're doing an <strong>event modeling session</strong> that even
          non-technical people can understand. For the first time estimates start
          working, and your system gets audit trails <em>and</em> a performance boost.
          Your junior developer learns why immutable data structures prevent that
          whole class of &quot;but it was working yesterday&quot; bugs. And, when
          we implement that RAG system, your team sees firsthand how functional composition
          turns a complex LLM pipeline into small, testable pieces they can actually
          reason about.
        </p>
        <p>
          <strong
            >How valuable would it be if your team learned why that &quot;AI
            doesn&#39;t work&quot; complaint was actually a malformed locale
            string?</strong
          > Not a hallucination, not a model failure - just an environment variable
          that made your French embeddings get searched with English queries. I&#39;ve
          seen teams waste weeks debugging &quot;AI problems&quot; that were really
          just classic distributed systems failures. Working together, your team
          learns to build evaluation suites - the unit tests of LLM systems - so
          when someone changes a prompt to fix one case, they don&#39;t break 100
          others.
        </p>
        <p>
          <strong
            >You&#39;re probably thinking &quot;great, another consultant
            who&#39;ll push their favorite framework then leave.&quot;</strong
          > You might worry about your team rejecting academic approaches or falling
          back to old habits. Those are real risks. That&#39;s why I work in your
          codebase, with your constraints, using mostly tools you already have. TypeScript
          becomes powerful when you actually use its type system. Your existing event
          bus becomes an event-sourced architecture one service at a time. And that
          vector database decision? Your team learns through real implementation
          why multi-tenancy means you can&#39;t just &quot;shove everything into
          the AI and let it work.&quot;
        </p>
        <p>
          The difference: Three months later, your team is teaching <em
            >each other</em
          > why each RAG component should be its own service (&quot;because we&#39;ve
          seen what happens when embeddings generation takes down search&quot;),
          implementing guardrail LLMs to cut costs by 70% (using the pattern we built
          together), and reviewing PRs with &quot;have you considered making this
          state transition pure?&quot; - not because I told them to, but because
          they&#39;ve felt the difference.
        </p>
        <p>
          <strong
            >Are you against having a team that catches environment
            misconfigurations at compile time instead of when the CEO demos to
            investors?</strong
          > Because that&#39;s what happens when type-driven development meets production
          AI - your locale string can&#39;t be malformed if it&#39;s a proper type,
          not a string. Your team stops firefighting and starts shipping.
        </p>
      </div>
      <!-- div>
        <h3 class="heading text-2xl uppercase my-8 text-secondary">
          My Skills
        </h3>
        <div class="flex flex-wrap gap-4 mt-8">
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            HTML
          </span>
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            CSS
          </span>
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            Javascript
          </span>
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            Typescript
          </span>
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            ReactJS
          </span>
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            Tailwind CSS
          </span>
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            Express JS
          </span>
          <span
            class="inline-flex items-center justify-center rounded-4xl py-4 px-8 outline-1 outline-dashed outline-secondary"
          >
            MonogDB
          </span>
        </div>
      </div -->
    </div>
  </div>
</section>
